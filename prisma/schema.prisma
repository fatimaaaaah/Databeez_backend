// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Modèle Utilisateur de base
model User {
  id              String    @id @default(cuid())
  numeroTelephone String    @unique
  nom             String
  prenom          String
  email           String    @unique
  motDePasse      String
  role            UserRole  @default(USER)
  photoProfil     String?
  dateInscription DateTime  @default(now())
  isActive        Boolean   @default(true)
  isVerified      Boolean   @default(false)
  
  // Relations
  mentor          Mentor?
  mentee          Mentee?
  evaluations     Evaluation[]
  notifications   Notification[]
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("users")
}

// Modèle Mentor
model Mentor {
  id                String   @id @default(cuid())
  utilisateurId     String   @unique
  numeroTelephone   String   
  nom               String
  prenom            String
  photoProfil       String
  anneesExperience  Int
  biographie        String
  
  // Relations
  user              User     @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)
  sessions          SessionMentorat[] @relation("MentorSessions")
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("mentors")
}

// Modèle Mentee  
model Mentee {
  id                  String   @id @default(cuid())
  utilisateurId       String   @unique
  nom                 String
  prenom              String
  type                String
  biographie          String
  numeroTelephone     String
  photoProfil         String
  
  // Relations
  user                User     @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)
  sessions            SessionMentorat[] @relation("MenteeSessions")
  paiements           Paiement[]
  mentorats           Mentorat[]
  
  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("mentees")
}

// Modèle Session de Mentorat
model SessionMentorat {
  id            String           @id @default(cuid())
  mentorId      String
  menteeId      String
  dateHeure     DateTime
  duree         Int              // Durée en minutes
  statut        SessionStatut    @default(PLANIFIEE)
  typeSession   TypeSession      @default(VIDEO)
  lienSession   String?
  compteRendu  String?
  notes         String?
  
  // Relations
  mentor        Mentor           @relation("MentorSessions", fields: [mentorId], references: [id])
  mentee        Mentee           @relation("MenteeSessions", fields: [menteeId], references: [id])
  evaluations   Evaluation[]
  
  // Timestamps
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@map("sessions_mentorat")
}

// Modèle Évaluation
model Evaluation {
  id          String   @id @default(cuid())
  sessionId   String
  userId      String
  note        Int      // Note de 1 à 5
  commentaire String?
  
  // Relations
  session     SessionMentorat @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id])
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("evaluations")
}

// Modèle Paiement
model Paiement {
  id            String           @id @default(cuid())
  menteeId      String
  montant       Float
  moyenPaiement MoyenPaiement
  datePaiement  DateTime         @default(now())
  statut        StatutPaiement   @default(EN_ATTENTE)
  reference     String?          // Référence de transaction
  description  String?
  
  // Relations
  mentee        Mentee           @relation(fields: [menteeId], references: [id])
  
  // Timestamps
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@map("paiements")
}


// Modèle Domaine d'Expertise
model DomaineExpertise {
  id          String   @id @default(cuid())
  nom         String   @unique
  description String
  actif       Boolean  @default(true)
  
  // Relations
  profils     Profil[]
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("domaines_expertise")
}

// Modèle Profil
model Profil {
  id                   String           @id @default(cuid())
  nom                  String
  description          String
  domaineExpertiseId   String
  
  // Relations
  domaineExpertise     DomaineExpertise @relation(fields: [domaineExpertiseId], references: [id])
  competences          Competence[]
  mentorats            Mentorat[]
  
  // Timestamps
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  @@map("profils")
}

// Modèle Compétence
model Competence {
  id          String   @id @default(cuid())
  nom         String   @unique
  description String
  profilId    String?
  
  // Relations
  profil      Profil?  @relation(fields: [profilId], references: [id])
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("competences")
}

// Modèle Mentorat
model Mentorat {
  id           String   @id @default(cuid())
  menteeId     String
  profilId     String
  objectif     String
  dateDebut    DateTime
  dateFin      DateTime?
  customData   String?  // LongText selon le diagramme
  statut       String   @default("EN_COURS")
  
  // Relations
  mentee       Mentee   @relation(fields: [menteeId], references: [id], onDelete: Cascade)
  profil       Profil   @relation(fields: [profilId], references: [id])
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("mentorats")
}

// Modèle Notification
model Notification {
  id           String           @id @default(cuid())
  utilisateurId String
  message      String
  type         TypeNotification
  dateEnvoi    DateTime         @default(now())
  statut       StatutNotification @default(NON_LU)
  lien         String?
  
  // Relations
  utilisateur  User             @relation(fields: [utilisateurId], references: [id])
  
  // Timestamps
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@map("notifications")
}

// Énumérations
enum UserRole {
  USER
  MENTOR
  MENTEE
  ADMIN
}

enum SessionStatut {
  PLANIFIEE
  EN_COURS
  TERMINEE
  ANNULEE
  REPORTEE
}

enum TypeSession {
  VIDEO
  AUDIO
  CHAT
  PRESENTIEL
}

enum MoyenPaiement {
  ORANGE_MONEY
  MOOV_MONEY
  MTN_MOBILE_MONEY
  CARTE_BANCAIRE
  VIREMENT
}

enum StatutPaiement {
  EN_ATTENTE
  VALIDE
  ECHEC
  REMBOURSE
}


enum NiveauCompetence {
  DEBUTANT
  INTERMEDIAIRE
  AVANCE
  EXPERT
}

enum TypeNotification {
  SESSION
  MATCHING
  PAIEMENT
  SYSTEME
  REMINDER
}

enum StatutNotification {
  NON_LU
  LU
  ARCHIVE
}

// Modèle OTP pour l'authentification par email
model OtpCode {
  id          String    @id @default(cuid())
  email       String
  code        String
  type        OtpType   @default(EMAIL_VERIFICATION)
  expiresAt   DateTime
  isUsed      Boolean   @default(false)
  attempts    Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([email, type])
  @@index([code])
  @@map("otp_codes")
}

enum OtpType {
  EMAIL_VERIFICATION
  LOGIN_VERIFICATION
} 